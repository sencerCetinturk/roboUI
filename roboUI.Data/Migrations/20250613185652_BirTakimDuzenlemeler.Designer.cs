// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using roboUI.Data;

#nullable disable

namespace roboUI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250613185652_BirTakimDuzenlemeler")]
    partial class BirTakimDuzenlemeler
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("roboUI.Core.Models.CoffeeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoffeeCategories");
                });

            modelBuilder.Entity("roboUI.Core.Models.CoffeeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CoffeeProducts");
                });

            modelBuilder.Entity("roboUI.Core.Models.CoffeeProductOptionDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CoffeeProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DefaultOptionChoiceId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DisplayOrderOverride")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsRequiredOverride")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("OptionChoiceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OptionGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeProductId");

                    b.HasIndex("DefaultOptionChoiceId");

                    b.HasIndex("OptionChoiceId");

                    b.HasIndex("OptionGroupId");

                    b.ToTable("OptionChoicesDefinitions");
                });

            modelBuilder.Entity("roboUI.Core.Models.OptionChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AdditionalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DefaultQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxQuantityAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OptionGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OptionGroupId");

                    b.ToTable("OptionChoices");
                });

            modelBuilder.Entity("roboUI.Core.Models.OptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OptionGroups");
                });

            modelBuilder.Entity("roboUI.Core.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("roboUI.Core.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CalculatedUnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CoffeeProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("roboUI.Core.Models.OrderItemChoiceSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OptionChoiceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PriceAtSelection")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SelectedQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OptionChoiceId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemsChoiceSelections");
                });

            modelBuilder.Entity("roboUI.Core.Models.CoffeeProduct", b =>
                {
                    b.HasOne("roboUI.Core.Models.CoffeeCategory", "Category")
                        .WithMany("CoffeeProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("roboUI.Core.Models.CoffeeProductOptionDefinition", b =>
                {
                    b.HasOne("roboUI.Core.Models.CoffeeProduct", "CoffeeProduct")
                        .WithMany("AvailableOptions")
                        .HasForeignKey("CoffeeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("roboUI.Core.Models.OptionChoice", "DefaultOptionChoice")
                        .WithMany()
                        .HasForeignKey("DefaultOptionChoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("roboUI.Core.Models.OptionChoice", null)
                        .WithMany("CoffeeProductOptionDefinitions")
                        .HasForeignKey("OptionChoiceId");

                    b.HasOne("roboUI.Core.Models.OptionGroup", "OptionGroup")
                        .WithMany()
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeProduct");

                    b.Navigation("DefaultOptionChoice");

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("roboUI.Core.Models.OptionChoice", b =>
                {
                    b.HasOne("roboUI.Core.Models.OptionGroup", "OptionGroup")
                        .WithMany("Choices")
                        .HasForeignKey("OptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("roboUI.Core.Models.OrderItem", b =>
                {
                    b.HasOne("roboUI.Core.Models.CoffeeProduct", "CoffeeProduct")
                        .WithMany()
                        .HasForeignKey("CoffeeProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("roboUI.Core.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("roboUI.Core.Models.OrderItemChoiceSelection", b =>
                {
                    b.HasOne("roboUI.Core.Models.OptionChoice", "OptionChoice")
                        .WithMany()
                        .HasForeignKey("OptionChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("roboUI.Core.Models.OrderItem", "OrderItem")
                        .WithMany("SelectedChoices")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionChoice");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("roboUI.Core.Models.CoffeeCategory", b =>
                {
                    b.Navigation("CoffeeProducts");
                });

            modelBuilder.Entity("roboUI.Core.Models.CoffeeProduct", b =>
                {
                    b.Navigation("AvailableOptions");
                });

            modelBuilder.Entity("roboUI.Core.Models.OptionChoice", b =>
                {
                    b.Navigation("CoffeeProductOptionDefinitions");
                });

            modelBuilder.Entity("roboUI.Core.Models.OptionGroup", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("roboUI.Core.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("roboUI.Core.Models.OrderItem", b =>
                {
                    b.Navigation("SelectedChoices");
                });
#pragma warning restore 612, 618
        }
    }
}
